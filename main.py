import logging
from aiogram import Bot, Dispatcher, executor, types
import bot_token
from work import get_word, get_verdict, check_user_message, transform_verdict, init
from stats import change_leaderboard, get_leaderboard, get_stats

TOKEN = bot_token.Token

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
count_attempts = 6

class Task(object):
    def __init__(self, word, verdicts, attempts):
        self.word = word
        self.verdicts = verdicts
        self.attempts = attempts

current_task = dict()

@dp.message_handler(commands=['start', 'help'])
async def send_help(message : types.Message):
    await message.answer("–î–∞–Ω–Ω—ã–π telegram –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–≥—Ä–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤ –∏–∑–≤–µ—Å—Ç–Ω—É—é –∏–≥—Ä—É wordle.\n"
    "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Å–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n"
    "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start_wordle –∏ –¥–∞–ª–µ–µ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–≥–∞–¥–∞—Ç—å –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∑–∞ 6 –ø–æ–ø—ã—Ç–æ–∫. "
    "–° –ø—Ä–∞–≤–∏–ª–∞–º–∏ –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ –¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã –∏–ª–∏ –Ω–∞–ø–∏—Å–∞–≤ /rules.\n"
    "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /stats. –ê –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ª—É—á—à–∏—Ö, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /leaderboard.\n"
    "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –±—É–∫–≤, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—å–±–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Å–µ–±—è —Å–∞–º–∏\n"
    "–ñ–µ–ª–∞—é –ø—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ãüòäüòä")

@dp.message_handler(commands=['rules'])
async def send_rules(message : types.Message):
    await message.answer("–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ(–Ω–∞–≤–µ—Ä–Ω–æ–µ)")

@dp.message_handler(commands=['leaderboard'])
async def send_leaderboard(message : types.Message):
    await message.answer(get_leaderboard())

@dp.message_handler(commands=['stats'])
async def send_stats(message : types.Message):
    await message.answer(get_stats(message.from_user))

@dp.message_handler(commands=['start_wordle'])
async def send_task(message : types.Message):
    userid = message.from_user.id
    user_message = message.text
    if userid in current_task:
        if current_task[userid].word != "":
            await message.answer("–ó–∞–∫–æ–Ω—á–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–∞—É–Ω–¥")
            return
    current_task[userid] = Task(get_word(), [], count_attempts)

    await message.answer("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ù–∞ –∫–∞–∂–¥–æ–º —Ö–æ–¥–µ –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–∑ 5 –±—É–∫–≤ –∏ –≤–∞–º –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –≤–µ—Ä–¥–∏–∫—Ç")

@dp.message_handler()
async def simple_message(message : types.Message):
    userid = message.from_user.id
    user_message = message.text

    if userid in current_task and current_task[userid].word != "":
        user_message = user_message.lower()
        if check_user_message(user_message) == True:
            result = get_verdict(current_task[userid].word, user_message)
            result = transform_verdict(result)

            current_task[userid].verdicts.append(result)
            current_task[userid].attempts -= 1

            if result == "üü©üü©üü©üü©üü©":
                result += "\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —É–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ!"
                await message.answer(result)
                all_verdicts = ""
                all_verdicts += "Wordle " + str(len(current_task[userid].verdicts)) + "/6:\n"
                for s in current_task[userid].verdicts:
                    all_verdicts += s + "\n"
                await message.answer(all_verdicts)
                change_leaderboard(message.from_user, len(current_task[userid].verdicts))
                current_task[userid] = Task("", [], 0)
                return
            else:
                if current_task[userid].attempts >= 5:
                    result += "\n–û—Å—Ç–∞–ª–æ—Å—å –µ—â—ë " + str(current_task[userid].attempts) + " –ø–æ–ø—ã—Ç–æ–∫"
                elif current_task[userid].attempts >= 2:
                    result += "\n–û—Å—Ç–∞–ª–æ—Å—å –µ—â—ë " + str(current_task[userid].attempts) + " –ø–æ–ø—ã—Ç–∫–∏"
                elif current_task[userid].attempts == 1:
                    result += "\n–û—Å—Ç–∞–ª–∞—Å—å –µ—â—ë " + str(current_task[userid].attempts) + " –ø–æ–ø—ã—Ç–∫–∞"
                else:
                    result += "\n–¢—ã –Ω–µ —Å–º–æ–≥ –æ—Ç–¥–∞–≥–∞—Ç—å —Å–ª–æ–≤–æ " + current_task[userid].word.upper() + " :—Å \n"
                    await message.answer(result)
                    all_verdicts = "Wordle " + str(len(current_task[userid].verdicts)) + "/6:\n"
                    for s in current_task[userid].verdicts:
                        all_verdicts += s + "\n"
                    await message.answer(all_verdicts)
                    change_leaderboard(message.from_user, 0)
                    current_task[userid] = Task("", [], 0)
                    return
                await message.answer(result)
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ —Å–ª–æ–≤–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
    else:
        await message.answer("–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å :(")
        

if __name__ == '__main__':
    init()
    executor.start_polling(dp, skip_updates=True)

