import logging
from aiogram import Bot, Dispatcher, executor, types
import bot_token
from work import get_word, get_verdict, check_user_message, transform_verdict, init

TOKEN = bot_token.Token

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
count_attempts = 6

class Task(object):
    def __init__(self, word, verdicts, attempts):
        self.word = word
        self.verdicts = verdicts
        self.attempts = attempts

current_task = dict()

@dp.message_handler(commands=['start', 'help'])
async def send_help(message : types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –¥–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–∑–≤–æ–ª–∏—Ç –∏–≥—Ä–∞—Ç—å –≤ –∏–∑–≤–µ—Å—Ç–Ω—É—é –∏–≥—Ä—É Wordle –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å."
    "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–ø–∏—à–∏ /start_wordle. –ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—Ä–æ–ø–∏—à–∏ /rules")

@dp.message_handler(commands=['rules'])
async def send_rules(message : types.Message):
    await message.answer("–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ")

@dp.message_handler(commands=['start_wordle'])
async def send_task(message : types.Message):
    userid = message.from_user.id
    user_message = message.text
    if userid in current_task:
        if current_task[userid].word != "":
            await message.answer("–ó–∞–∫–æ–Ω—á–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–∞—É–Ω–¥")
            return
    current_task[userid] = Task(get_word(), [], count_attempts)

    await message.answer("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ù–∞ –∫–∞–∂–¥–æ–º —Ö–æ–¥–µ –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–∑ 5 –±—É–∫–≤ –∏ –≤–∞–º –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –≤–µ—Ä–¥–∏–∫—Ç")

@dp.message_handler()
async def simple_message(message : types.Message):
    userid = message.from_user.id
    user_message = message.text

    if userid in current_task and current_task[userid].word != "":
        user_message = user_message.lower()
        if check_user_message(user_message) == True:
            result = get_verdict(current_task[userid].word, user_message)
            result = transform_verdict(result)

            current_task[userid].verdicts.append(result)
            current_task[userid].attempts -= 1

            if result == "üü©üü©üü©üü©üü©":
                result += "\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —É–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ!"
                await message.answer(result)
                all_verdicts = ""
                all_verdicts += "Wordle " + str(len(current_task[userid].verdicts)) + "/6:\n"
                for s in current_task[userid].verdicts:
                    all_verdicts += s + "\n"
                await message.answer(all_verdicts)
                current_task[userid] = Task("", [], 0)
                return
            else:
                if current_task[userid].attempts >= 5:
                    result += "\n–û—Å—Ç–∞–ª–æ—Å—å –µ—â—ë " + str(current_task[userid].attempts) + " –ø–æ–ø—ã—Ç–æ–∫"
                elif current_task[userid].attempts >= 2:
                    result += "\n–û—Å—Ç–∞–ª–æ—Å—å –µ—â—ë " + str(current_task[userid].attempts) + " –ø–æ–ø—ã—Ç–∫–∏"
                elif current_task[userid].attempts == 1:
                    result += "\n–û—Å—Ç–∞–ª–∞—Å—å –µ—â—ë " + str(current_task[userid].attempts) + " –ø–æ–ø—ã—Ç–∫–∞"
                else:
                    result += "\n–¢—ã –Ω–µ —Å–º–æ–≥ –æ—Ç–¥–∞–≥–∞—Ç—å —Å–ª–æ–≤–æ " + current_task[userid].word.upper() + " :—Å \n"
                    await message.answer(result)
                    all_verdicts = "Wordle " + str(len(current_task[userid].verdicts)) + "/6:\n"
                    for s in current_task[userid].verdicts:
                        all_verdicts += s + "\n"
                    await message.answer(all_verdicts)
                    current_task[userid] = Task("", [], 0)
                    return
                await message.answer(result)
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ —Å–ª–æ–≤–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
    else:
        await message.answer("–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å :(")
        

if __name__ == '__main__':
    init()
    executor.start_polling(dp, skip_updates=True)

